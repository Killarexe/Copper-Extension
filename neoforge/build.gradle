plugins {
    id 'com.github.johnrengelman.shadow' version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

loom {
    runs {
        data {
            data()
            programArgs "--all", "--mod", "${mod_id}"
            programArgs "--output", project(":neoforge").file("src/generated/resources").absolutePath
            programArgs "--existing", project(":common").file("src/main/resources/").absolutePath
        }
    }
}

processResources {
    var replaceProperties = [
            mod_id: mod_id,
            mod_version: mod_version,
            mod_license: mod_license,
            mod_name: mod_name,
            mod_description: mod_description,
            mod_url: mod_homepage_url,
            minecraft_version: minecraft_version,
            neoforge_loader_version_range: neoforge_loader_version_range,
            neoforge_version_range: neoforge_version_range,
            minecraft_version_range: neoforge_minecraft_version_range
    ]

    inputs.properties replaceProperties

    filesMatching("META-INF/neoforge.mods.toml") {
        expand replaceProperties
    }
}

base {
    archivesName = archives_base_name + "-neoforge"
}
